package Interprete;

import java_cup.runtime.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) 
			new parser(new Scanner(System.in,sf),sf).parse();
		else 
			new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

:}

action code {:

			private boolean debug = true;
			
			:}
			
/* Simbolos Terminales */

terminal SEL;
terminal PRO;
terminal UNI;
terminal DIF;
terminal PROC;
terminal INT;
terminal DIV;
terminal REUN;
terminal AND;
terminal NOT;
terminal OR;
terminal EQ;
terminal DIFERENTE;
terminal MAYOR;
terminal MAYOREQ;
terminal MENOR;
terminal MENOREQ;
terminal SUMA;
terminal RESTA;
terminal MULTI;
terminal DIVI;
terminal IPAREN;
terminal DPAREN;
terminal COMA;
terminal COMI;
terminal FECHA;
terminal NUEVA;
terminal Integer NUM;
terminal String ID;

/* Simbolos No Terminales */

non terminal programa;
non terminal seq_consultas;
non terminal expresion;
non terminal predicado;
non terminal restriccion;
non terminal nombre;
non terminal operacion;

precedence left SEL, PRO;
precedence left PROC, REUN, INT, UNI, DIF, DIV;
precedence left AND, OR, NOT;
precedence left IPAREN, DPAREN;
precedence left SUMA, RESTA;
precedence left MULTI, DIVI;

/* REGLAS GRAMATICALES */

programa			::= seq_consultas
			;

seq_consultas		::= seq_consultas:con NUEVA expresion:otraCon
					| expresion:consulta	
			;
			
expresion		 	::= nombre:relacion
					| expresion:condicionI UNI expresion:condicionD
					| expresion:condicionI INT expresion:condicionD
					| expresion:condicionI DIV expresion:condicionD
					| expresion:condicionI DIF expresion:condicionD
					| expresion:condicionI PROC expresion:condicionD
					| expresion:condicionI REUN expresion:condicionD
					| SEL predicado:restricciones IPAREN expresion:exp DPAREN 
					| PRO predicado:lista IPAREN expresion:exp DPAREN
			;
			
predicado			::= predicado:condiciones COMA restriccion:restriccion		
					| IPAREN restriccion:condiciones DPAREN AND predicado:restricciones 
					| IPAREN restriccion:condiciones DPAREN OR predicado:restricciones
					| IPAREN restriccion:condiciones DPAREN NOT predicado:restricciones
					| IPAREN restriccion:condiciones DPAREN 
					| restriccion:restr
			;

restriccion			::= nombre:campo	
					| nombre:campo EQ nombre:condicion
					| nombre:campo DIFERENTE nombre:condicion
					| nombre:campo MENOR nombre:condicion
					| nombre:campo MENOREQ nombre:condicion
					| nombre:campo MAYOR nombre:condicion
					| nombre:campo MAYOREQ nombre:condicion
					| restriccion:resI AND restriccion:resD
					| restriccion:resI OR restriccion:resD
					| restriccion:resI NOT restriccion:resD 
					| IPAREN nombre:operacion DPAREN
			;
			
nombre				::= ID:palabra 
					| COMI ID:palabra COMI
					| NUM:numero
					| FECHA:fecha
					| ID:palabra ID:sinonimo
					| nombre:opeI operacion:operador nombre:opeD
			;			
operacion			::= SUMA:suma
					| RESTA:resta
					| MULTI:multiplica
					| DIVI:divide
			;