
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 01 14:21:33 VET 2013
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import nodos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 01 14:21:33 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\012\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\011\000\002\002\005\000\002\002\011" +
    "\000\002\002\005\000\002\002\011\000\002\002\005\000" +
    "\002\002\011\000\002\002\005\000\002\002\011\000\002" +
    "\002\005\000\002\002\011\000\002\002\003\000\002\003" +
    "\007\000\002\003\011\000\002\003\007\000\002\003\003" +
    "\000\002\004\005\000\002\004\003\000\002\005\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\010\003\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\012\004\011\005\005\031\014\037\010\001" +
    "\002\000\020\002\001\006\021\007\016\010\020\011\024" +
    "\012\022\013\023\001\002\000\016\015\071\031\101\034" +
    "\070\035\065\036\063\037\066\001\002\000\004\002\154" +
    "\001\002\000\022\002\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\032\uffef\001\002\000\024\002\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\032" +
    "\uffd5\037\153\001\002\000\016\015\071\031\075\034\070" +
    "\035\065\036\063\037\066\001\002\000\022\002\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\032\ufff3" +
    "\001\002\000\022\002\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\032\uffdf\001\002\000\012\004\011" +
    "\005\005\031\014\037\010\001\002\000\020\006\021\007" +
    "\016\010\020\011\024\012\022\013\023\032\017\001\002" +
    "\000\012\004\011\005\005\031\014\037\010\001\002\000" +
    "\016\006\033\007\032\010\034\011\037\012\035\013\036" +
    "\001\002\000\012\004\011\005\005\031\014\037\010\001" +
    "\002\000\012\004\011\005\005\031\014\037\010\001\002" +
    "\000\012\004\011\005\005\031\014\037\010\001\002\000" +
    "\010\004\011\005\005\037\010\001\002\000\012\004\011" +
    "\005\005\031\014\037\010\001\002\000\022\002\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\032\ufffd" +
    "\001\002\000\022\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\032\ufff5\001\002\000\022\002\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\032" +
    "\ufff9\001\002\000\022\002\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\032\uffff\001\002\000\022\002" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\032\ufffb\001\002\000\004\031\057\001\002\000\004\031" +
    "\054\001\002\000\004\031\051\001\002\000\004\031\046" +
    "\001\002\000\004\031\043\001\002\000\004\031\040\001" +
    "\002\000\012\004\011\005\005\031\014\037\010\001\002" +
    "\000\020\006\021\007\016\010\020\011\024\012\022\013" +
    "\023\032\042\001\002\000\022\002\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\032\ufffc\001\002\000" +
    "\012\004\011\005\005\031\014\037\010\001\002\000\020" +
    "\006\021\007\016\010\020\011\024\012\022\013\023\032" +
    "\045\001\002\000\022\002\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\032\ufff4\001\002\000\012\004" +
    "\011\005\005\031\014\037\010\001\002\000\020\006\021" +
    "\007\016\010\020\011\024\012\022\013\023\032\050\001" +
    "\002\000\022\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\032\ufff8\001\002\000\012\004\011\005" +
    "\005\031\014\037\010\001\002\000\020\006\021\007\016" +
    "\010\020\011\024\012\022\013\023\032\053\001\002\000" +
    "\022\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\032\ufffa\001\002\000\012\004\011\005\005\031" +
    "\014\037\010\001\002\000\020\006\021\007\016\010\020" +
    "\011\024\012\022\013\023\032\056\001\002\000\022\002" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\032\ufffe\001\002\000\012\004\011\005\005\031\014\037" +
    "\010\001\002\000\020\006\021\007\016\010\020\011\024" +
    "\012\022\013\023\032\061\001\002\000\022\002\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\032\ufff6" +
    "\001\002\000\022\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\032\ufff7\001\002\000\040\014\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\001\002\000\012\014\103\016\105\031\uffed\033" +
    "\uffed\001\002\000\040\014\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\001\002\000\042" +
    "\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\001\002\000\014\014\uffec\016" +
    "\uffec\031\uffec\032\uffec\033\uffec\001\002\000\004\037\066" +
    "\001\002\000\016\015\071\031\101\034\070\035\065\036" +
    "\063\037\066\001\002\000\040\014\uffe7\016\uffe7\017\132" +
    "\020\136\021\134\022\133\023\131\024\135\025\122\026" +
    "\120\027\123\030\124\031\uffe7\032\uffe7\033\uffe7\001\002" +
    "\000\040\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\001\002\000\006\031\145\033" +
    "\110\001\002\000\016\015\071\031\101\034\070\035\065" +
    "\036\063\037\066\001\002\000\012\014\103\016\105\032" +
    "\104\033\uffed\001\002\000\036\014\uffe7\016\uffe7\017\132" +
    "\020\136\021\134\022\133\023\131\024\135\025\122\026" +
    "\120\027\123\030\124\032\121\033\uffe7\001\002\000\006" +
    "\032\111\033\110\001\002\000\016\015\071\031\101\034" +
    "\070\035\065\036\063\037\066\001\002\000\010\014\103" +
    "\016\105\032\104\001\002\000\016\015\071\031\101\034" +
    "\070\035\065\036\063\037\066\001\002\000\014\014\uffe9" +
    "\016\uffe9\031\uffe9\032\uffe9\033\uffe9\001\002\000\016\015" +
    "\071\031\101\034\070\035\065\036\063\037\066\001\002" +
    "\000\014\014\103\016\uffea\031\uffea\032\uffea\033\uffea\001" +
    "\002\000\014\014\uffeb\016\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\001\002\000\014\031\115\034\070\035\065\036\063\037" +
    "\066\001\002\000\004\031\112\001\002\000\012\004\011" +
    "\005\005\031\014\037\010\001\002\000\020\006\021\007" +
    "\016\010\020\011\024\012\022\013\023\032\114\001\002" +
    "\000\022\002\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\032\ufff1\001\002\000\012\034\070\035\065" +
    "\036\063\037\066\001\002\000\010\031\uffee\032\uffee\033" +
    "\uffee\001\002\000\014\025\122\026\120\027\123\030\124" +
    "\032\121\001\002\000\012\034\070\035\065\036\063\037" +
    "\066\001\002\000\014\014\uffe0\016\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\001\002\000\012\034\070\035\065\036\063\037" +
    "\066\001\002\000\012\034\070\035\065\036\063\037\066" +
    "\001\002\000\012\034\070\035\065\036\063\037\066\001" +
    "\002\000\040\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\001\002\000\040\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\001\002\000\040\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\123\030\124\031\uffd9\032\uffd9\033\uffd9\001\002\000" +
    "\040\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\123\030\124\031" +
    "\uffd8\032\uffd8\033\uffd8\001\002\000\012\034\070\035\065" +
    "\036\063\037\066\001\002\000\012\034\070\035\065\036" +
    "\063\037\066\001\002\000\012\034\070\035\065\036\063" +
    "\037\066\001\002\000\012\034\070\035\065\036\063\037" +
    "\066\001\002\000\012\034\070\035\065\036\063\037\066" +
    "\001\002\000\012\034\070\035\065\036\063\037\066\001" +
    "\002\000\024\014\uffe5\016\uffe5\025\122\026\120\027\123" +
    "\030\124\031\uffe5\032\uffe5\033\uffe5\001\002\000\024\014" +
    "\uffe3\016\uffe3\025\122\026\120\027\123\030\124\031\uffe3" +
    "\032\uffe3\033\uffe3\001\002\000\024\014\uffe2\016\uffe2\025" +
    "\122\026\120\027\123\030\124\031\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\024\014\uffe1\016\uffe1\025\122\026\120\027" +
    "\123\030\124\031\uffe1\032\uffe1\033\uffe1\001\002\000\024" +
    "\014\uffe6\016\uffe6\025\122\026\120\027\123\030\124\031" +
    "\uffe6\032\uffe6\033\uffe6\001\002\000\024\014\uffe4\016\uffe4" +
    "\025\122\026\120\027\123\030\124\031\uffe4\032\uffe4\033" +
    "\uffe4\001\002\000\012\004\011\005\005\031\014\037\010" +
    "\001\002\000\020\006\021\007\016\010\020\011\024\012" +
    "\022\013\023\032\147\001\002\000\022\002\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\032\ufff2\001" +
    "\002\000\014\014\uffe8\016\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\001\002\000\004\034\152\001\002\000\040\014\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\001\002\000\022\002\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\032\uffde\001\002\000\004\002" +
    "\000\001\002\000\006\031\156\033\110\001\002\000\012" +
    "\004\011\005\005\031\014\037\010\001\002\000\020\006" +
    "\021\007\016\010\020\011\024\012\022\013\023\032\160" +
    "\001\002\000\022\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\032\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\014\002\003\003\011\010\006\011\012\012" +
    "\005\001\001\000\002\001\001\000\014\004\154\005\063" +
    "\006\066\007\071\011\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\073\005\063" +
    "\006\066\007\071\011\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\014\003\011\010\006\011\012" +
    "\001\001\000\002\001\001\000\012\002\061\003\011\010" +
    "\006\011\012\001\001\000\002\001\001\000\012\002\030" +
    "\003\011\010\006\011\012\001\001\000\012\002\027\003" +
    "\011\010\006\011\012\001\001\000\012\002\026\003\011" +
    "\010\006\011\012\001\001\000\010\003\025\010\006\011" +
    "\012\001\001\000\012\002\024\003\011\010\006\011\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\040\003\011" +
    "\010\006\011\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\043\003\011\010\006\011\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\046\003" +
    "\011\010\006\011\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\051\003\011\010\006\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\054" +
    "\003\011\010\006\011\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\057\003\011\010\006\011\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\150\001" +
    "\001\000\012\005\147\006\066\007\071\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\077\005\075\006\066\007\076\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\101\006\066\007\076\011\072\001\001\000\002" +
    "\001\001\000\012\005\106\006\066\007\071\011\072\001" +
    "\001\000\002\001\001\000\012\005\105\006\066\007\071" +
    "\011\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\115\007\071\011\072\001\001\000\002\001\001" +
    "\000\012\002\112\003\011\010\006\011\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\116\011\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\127\011\072\001\001\000\002\001\001\000\006\007\126" +
    "\011\072\001\001\000\006\007\125\011\072\001\001\000" +
    "\006\007\124\011\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\143\011\072\001\001\000\006\007\142\011\072\001\001" +
    "\000\006\007\141\011\072\001\001\000\006\007\140\011" +
    "\072\001\001\000\006\007\137\011\072\001\001\000\006" +
    "\007\136\011\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\145\003\011\010\006\011" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\156" +
    "\003\011\010\006\011\012\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
		/*if (args.length==0) 
			new parser(new Scanner(System.in,sf),sf).parse();
		else 
			new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
		*/	
		parser parser_obj = new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		
		NodoBase raiz =  parser_obj.action_obj.getRaiz();
		Util.imprimirArbol(raiz); 
                new Interprete(raiz).inicio();
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



			private boolean debug = true;
			private NodoBase raiz=null;
			
			public NodoBase getRaiz(){
				return raiz;
			}
			
			public String rootType(NodoBase root){
				String type="";
				if(root instanceof NodoId)
					type="NodoId";
				else if(root instanceof NodoExpresion)
					type="NodoExpresion";
				else if(root instanceof NodoComparacion)
					type="NodoComparacion";
				else if(root instanceof NodoFecha)
					type="NodoFecha";
				else if(root instanceof NodoNumero)
					type="NodoNumero";
				else if(root instanceof NodoOperacion)
					type="NodoOperacion";
				else if(root instanceof NodoOperadorLogico)
					type="NodoOperadorLogico";
				else if(root instanceof NodoBase){
					type="NodoBase";
				}else 
					type="Desconocido";
				return type;
			}
			
			
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identificador ::= ID 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoId(palabra.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nombre ::= nombre DIVI nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.divi,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nombre ::= nombre MULTI nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.multi,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nombre ::= nombre RESTA nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.resta,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nombre ::= nombre SUMA nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.suma,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nombre ::= FECHA 
            {
              NodoBase RESULT =null;
		int fechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fecha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoFecha(fecha.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nombre ::= NUM 
            {
              NodoBase RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoNumero(numero);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nombre ::= COMI identificador COMI 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nombre ::= identificador 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relacion ::= ID ID 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sinonimoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sinonimoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sinonimo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoId(palabra.toString(), sinonimo.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relacion ::= identificador 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // restriccion ::= IPAREN nombre DPAREN 
            {
              NodoBase RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase operacion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = operacion;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // restriccion ::= nombre MAYOREQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.mayorIgual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // restriccion ::= nombre MAYOR nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.mayor,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // restriccion ::= nombre MENOREQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.menorIgual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // restriccion ::= nombre MENOR nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.menor,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // restriccion ::= nombre DIFERENTE nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.diferente,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // restriccion ::= nombre EQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.igual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // restriccion ::= nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = campo;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionBool ::= NOT expresionBool 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.not,null,ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionBool ::= IPAREN expresionBool DPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.or, conI, conD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.and, conI, conD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionBool ::= restriccion 
            {
              NodoBase RESULT =null;
		int restrileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restriright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase restri = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = restri;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // predicado ::= expresionBool 
            {
              NodoBase RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase bool = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = bool;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // predicado ::= predicado COMA restriccion 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						NodoBase hijoActual = conI;
						if(hijoActual !=null){
							while(hijoActual.tieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(conD);
							RESULT=conI;
						}else{
							RESULT=conD;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_simple ::= relacion 
            {
              NodoBase RESULT =null;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=rela;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp_simple ::= PRO predicado IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int restriccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int restriccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase restricciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new NodoExpresion("PRO",restricciones,rela);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp_simple ::= SEL IPAREN predicado DPAREN IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int restriccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int restriccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase restricciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new NodoExpresion("SEL",restricciones,rela);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp_simple ::= SEL predicado IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int restriccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int restriccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase restricciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new NodoExpresion("SEL",restricciones,rela);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp_simple 
            {
              NodoBase RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expresion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = expresion;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= IPAREN exp DPAREN REUN IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("REUN",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp REUN exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("REUN",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= IPAREN exp DPAREN DIF IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("DIF",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp DIF exp 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("DIF",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= IPAREN exp DPAREN DIV IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("DIV",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp DIV exp 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("DIV",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= IPAREN exp DPAREN PROC IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("PROC",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= exp PROC exp 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("PROC",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= IPAREN exp DPAREN INT IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("INT",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= exp INT exp 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("INT",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= IPAREN exp DPAREN UNI IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoOperacion("UNI",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= exp UNI exp 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("UNI",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= exp 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				raiz = prog;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

