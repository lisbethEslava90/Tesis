
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 15 15:02:53 VET 2013
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import nodos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 15 15:02:53 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\011\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\003\000" +
    "\002\003\007\000\002\003\007\000\002\003\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\005\000\002\004\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\007\003\000\002\007\004\000\002\006\003" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\004\010\005\011\037\004\001\002\000" +
    "\024\002\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\032\uffda\037\123\001\002\000\004\002\122\001" +
    "\002\000\022\002\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\032\ufff6\001\002\000\022\002\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\032\uffe4" +
    "\001\002\000\014\031\040\034\034\035\031\036\030\037" +
    "\032\001\002\000\014\031\040\034\034\035\031\036\030" +
    "\037\032\001\002\000\022\002\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\032\ufff9\001\002\000\020" +
    "\002\001\006\016\007\014\010\015\011\021\012\017\013" +
    "\020\001\002\000\010\004\010\005\011\037\004\001\002" +
    "\000\010\004\010\005\011\037\004\001\002\000\010\004" +
    "\010\005\011\037\004\001\002\000\010\004\010\005\011" +
    "\037\004\001\002\000\010\004\010\005\011\037\004\001" +
    "\002\000\010\004\010\005\011\037\004\001\002\000\022" +
    "\002\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\032\ufffe\001\002\000\022\002\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\032\ufffa\001\002\000" +
    "\022\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\032\ufffc\001\002\000\022\002\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\032\uffff\001\002" +
    "\000\022\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\032\ufffd\001\002\000\022\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\032\ufffb\001" +
    "\002\000\042\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\001\002\000\042" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\001\002\000\044\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\001\002\000\014\014\071\015\073" +
    "\016\074\031\ufff0\033\ufff0\001\002\000\004\037\032\001" +
    "\002\000\042\014\uffef\015\uffef\016\uffef\017\051\020\056" +
    "\021\053\022\052\023\046\024\054\025\045\026\055\027" +
    "\050\030\044\031\uffef\032\uffef\033\uffef\001\002\000\042" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\001\002\000\006\031\111\033" +
    "\103\001\002\000\014\031\041\034\034\035\031\036\030" +
    "\037\032\001\002\000\012\034\034\035\031\036\030\037" +
    "\032\001\002\000\012\014\071\015\073\016\074\032\072" +
    "\001\002\000\036\014\uffef\015\uffef\016\uffef\017\051\020" +
    "\056\021\053\022\052\023\046\024\054\025\045\026\055" +
    "\027\050\030\044\032\047\001\002\000\012\034\034\035" +
    "\031\036\030\037\032\001\002\000\012\034\034\035\031" +
    "\036\030\037\032\001\002\000\012\034\034\035\031\036" +
    "\030\037\032\001\002\000\016\014\uffe5\015\uffe5\016\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\001\002\000\012\034\034\035" +
    "\031\036\030\037\032\001\002\000\012\034\034\035\031" +
    "\036\030\037\032\001\002\000\012\034\034\035\031\036" +
    "\030\037\032\001\002\000\012\034\034\035\031\036\030" +
    "\037\032\001\002\000\012\034\034\035\031\036\030\037" +
    "\032\001\002\000\012\034\034\035\031\036\030\037\032" +
    "\001\002\000\012\034\034\035\031\036\030\037\032\001" +
    "\002\000\026\014\uffed\015\uffed\016\uffed\025\045\026\055" +
    "\027\050\030\044\031\uffed\032\uffed\033\uffed\001\002\000" +
    "\042\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\050\030" +
    "\044\031\uffdd\032\uffdd\033\uffdd\001\002\000\026\014\uffeb" +
    "\015\uffeb\016\uffeb\025\045\026\055\027\050\030\044\031" +
    "\uffeb\032\uffeb\033\uffeb\001\002\000\026\014\uffea\015\uffea" +
    "\016\uffea\025\045\026\055\027\050\030\044\031\uffea\032" +
    "\uffea\033\uffea\001\002\000\026\014\uffe9\015\uffe9\016\uffe9" +
    "\025\045\026\055\027\050\030\044\031\uffe9\032\uffe9\033" +
    "\uffe9\001\002\000\026\014\uffee\015\uffee\016\uffee\025\045" +
    "\026\055\027\050\030\044\031\uffee\032\uffee\033\uffee\001" +
    "\002\000\042\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\001\002\000\026" +
    "\014\uffec\015\uffec\016\uffec\025\045\026\055\027\050\030" +
    "\044\031\uffec\032\uffec\033\uffec\001\002\000\042\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\050\030\044\031\uffde" +
    "\032\uffde\033\uffde\001\002\000\042\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\001\002\000\014\031\041\034\034\035\031\036\030" +
    "\037\032\001\002\000\014\014\077\015\100\016\101\031" +
    "\ufff1\033\ufff1\001\002\000\014\031\041\034\034\035\031" +
    "\036\030\037\032\001\002\000\014\031\041\034\034\035" +
    "\031\036\030\037\032\001\002\000\016\014\uffe7\015\uffe7" +
    "\016\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002\000\016\014" +
    "\uffe6\015\uffe6\016\uffe6\031\uffe6\032\uffe6\033\uffe6\001\002" +
    "\000\014\031\040\034\034\035\031\036\030\037\032\001" +
    "\002\000\014\031\040\034\034\035\031\036\030\037\032" +
    "\001\002\000\014\031\040\034\034\035\031\036\030\037" +
    "\032\001\002\000\006\031\ufff3\033\ufff3\001\002\000\014" +
    "\031\041\034\034\035\031\036\030\037\032\001\002\000" +
    "\014\014\071\015\073\016\074\031\ufff5\033\ufff5\001\002" +
    "\000\006\031\ufff2\033\ufff2\001\002\000\006\031\ufff4\033" +
    "\ufff4\001\002\000\016\014\uffe8\015\uffe8\016\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\001\002\000\014\025\045\026\055\027" +
    "\050\030\044\032\047\001\002\000\010\004\010\005\011" +
    "\037\004\001\002\000\020\006\016\007\014\010\015\011" +
    "\021\012\017\013\020\032\113\001\002\000\022\002\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\032" +
    "\ufff7\001\002\000\004\034\115\001\002\000\042\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\001\002\000\006\031\117\033\103\001" +
    "\002\000\010\004\010\005\011\037\004\001\002\000\020" +
    "\006\016\007\014\010\015\011\021\012\017\013\020\032" +
    "\121\001\002\000\022\002\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\032\ufff8\001\002\000\004\002" +
    "\000\001\002\000\022\002\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\032\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\012\003\011\007\005\010\006\011" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\115\005\032\006" +
    "\034\010\035\001\001\000\012\004\036\005\032\006\034" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\026\007\005\010\006\001\001\000\010\003\025" +
    "\007\005\010\006\001\001\000\010\003\024\007\005\010" +
    "\006\001\001\000\010\003\023\007\005\010\006\001\001" +
    "\000\010\003\022\007\005\010\006\001\001\000\010\003" +
    "\021\007\005\010\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\041\006\042\010\035\001\001\000\006\006" +
    "\107\010\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\067\010\035\001\001\000\006\006\066\010" +
    "\035\001\001\000\006\006\065\010\035\001\001\000\002" +
    "\001\001\000\006\006\064\010\035\001\001\000\006\006" +
    "\063\010\035\001\001\000\006\006\062\010\035\001\001" +
    "\000\006\006\061\010\035\001\001\000\006\006\060\010" +
    "\035\001\001\000\006\006\057\010\035\001\001\000\006" +
    "\006\056\010\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\106\006\034" +
    "\010\035\001\001\000\002\001\001\000\010\005\075\006" +
    "\034\010\035\001\001\000\010\005\074\006\034\010\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\105\005\032\006\034\010\035\001\001\000\012\004\104" +
    "\005\032\006\034\010\035\001\001\000\012\004\101\005" +
    "\032\006\034\010\035\001\001\000\002\001\001\000\010" +
    "\005\103\006\034\010\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\111\003\011\007\005\010\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\117\003" +
    "\011\007\005\010\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
		/*if (args.length==0) 
			new parser(new Scanner(System.in,sf),sf).parse();
		else 
			new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
		*/	
		
		parser parser_obj = new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);
		parser_obj.parse();
		
		NodoBase raiz =  parser_obj.action_obj.getRaiz();
		System.out.println("TIPO RAIZ: "+parser_obj.action_obj.rootType(raiz));
		Util.imprimirArbol(raiz); 

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



			private boolean debug = true;
			private NodoBase raiz=null;
			
			public NodoBase getRaiz(){
				return raiz;
			}
			
			public String rootType(NodoBase root){
				String type="";
				if(root instanceof NodoId)
					type="NodoId";
				else if(root instanceof NodoExpresion)
					type="NodoExpresion";
				else if(root instanceof NodoComparacion)
					type="NodoComparacion";
				else if(root instanceof NodoFecha)
					type="NodoFecha";
				else if(root instanceof NodoNumero)
					type="NodoNumero";
				else if(root instanceof NodoOperacion)
					type="NodoOperacion";
				else if(root instanceof NodoOperadorLogico)
					type="NodoOperadorLogico";
				else if(root instanceof NodoBase){
					type="NodoBase";
				}else 
					type="Desconocido";
				return type;
			}
			
			
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identificador ::= ID 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoId(palabra.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nombre ::= nombre DIVI nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.divi,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nombre ::= nombre MULTI nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.multi,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nombre ::= nombre RESTA nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.resta,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nombre ::= nombre SUMA nombre 
            {
              NodoBase RESULT =null;
		int opeIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opeIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase opeI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase opeD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(opeI,tipoOp.suma,opeD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nombre ::= FECHA 
            {
              NodoBase RESULT =null;
		int fechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fecha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoFecha(fecha.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nombre ::= NUM 
            {
              NodoBase RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoNumero(numero);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nombre ::= COMI identificador COMI 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nombre ::= identificador 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relacion ::= ID ID 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sinonimoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sinonimoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sinonimo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoId(palabra.toString(), sinonimo.toString());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relacion ::= identificador 
            {
              NodoBase RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase palabra = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = palabra;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // restriccion ::= IPAREN nombre DPAREN 
            {
              NodoBase RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase operacion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = operacion;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // restriccion ::= restriccion NOT restriccion 
            {
              NodoBase RESULT =null;
		int resIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase resI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase resD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.not, resI, resD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // restriccion ::= restriccion OR restriccion 
            {
              NodoBase RESULT =null;
		int resIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase resI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase resD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.or, resI, resD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // restriccion ::= restriccion AND restriccion 
            {
              NodoBase RESULT =null;
		int resIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase resI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase resD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.and, resI, resD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // restriccion ::= nombre MAYOREQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.mayorIgual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // restriccion ::= nombre MAYOR nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.mayor,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // restriccion ::= nombre MENOREQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.menorIgual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // restriccion ::= nombre MENOR nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.menor,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // restriccion ::= nombre DIFERENTE nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.diferente,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // restriccion ::= nombre EQ nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoComparacion(campo,tipoOp.igual,condicion);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // restriccion ::= nombre 
            {
              NodoBase RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase campo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = campo;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // predicado ::= restriccion 
            {
              NodoBase RESULT =null;
		int restrileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restriright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase restri = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = restri;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicado ::= IPAREN restriccion DPAREN 
            {
              NodoBase RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cond = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = cond;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicado ::= IPAREN restriccion DPAREN NOT predicado 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.not, conI, conD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicado ::= IPAREN restriccion DPAREN OR predicado 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.or, conI, conD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicado ::= IPAREN restriccion DPAREN AND predicado 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new NodoOperadorLogico(tipoOp.and, conI, conD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // predicado ::= predicado COMA restriccion 
            {
              NodoBase RESULT =null;
		int conIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase conI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase conD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						NodoBase hijoActual = conI;
						if(hijoActual !=null){
							while(hijoActual.tieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(conD);
							RESULT=conI;
						}else{
							RESULT=conD;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_simple ::= relacion 
            {
              NodoBase RESULT =null;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=rela;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_simple ::= PRO predicado IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int restriccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int restriccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase restricciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new NodoExpresion("PRO",restricciones,rela);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_simple ::= SEL predicado IPAREN exp DPAREN 
            {
              NodoBase RESULT =null;
		int restriccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int restriccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase restricciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int relaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase rela = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new NodoExpresion("SEL",restricciones,rela);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp_simple 
            {
              NodoBase RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expresion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = expresion;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp REUN exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("REUN",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= exp DIF exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("DIF",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= exp DIV exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("DIV",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= exp PROC exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("PROC",condicionI,condicionD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= exp INT exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("INT",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= exp UNI exp_simple 
            {
              NodoBase RESULT =null;
		int condicionIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase condicionI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicionDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicionD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoOperacion("UNI",condicionI,condicionD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= exp 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				raiz = prog;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

